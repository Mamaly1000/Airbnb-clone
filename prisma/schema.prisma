// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String? 
  email String? @unique
  emailVerified DateTime?
  image String? 
  hashedPassword String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt 
  favoriteIds String[] @db.ObjectId
  accounts Account[] 
  listings Listing[] 
  reservations Reservation[]
  feedbacks Feedback[]
  comments Comment[]

}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String 
  provider String
  providerAccountId String
  access_token String? @db.String
  refresh_token String? @db.String
  expire_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade )
  @@unique([provider,providerAccountId])
}
model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int 
  guestCount Int 
  locationValue String
  userId String @db.ObjectId
  price Int 
  rate Int @default(0)
  user User @relation(fields: [userId],references: [id] ,onDelete: Cascade)
  feedbacks Feedback[]
  reservations Reservation[] 
  comments Comment[]
}
model Reservation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int 
  createdAt DateTime @default(now())
  status String @default("PENDING")

  user User @relation(fields: [userId],references: [id] ,onDelete: Cascade)
  listing Listing @relation(fields: [listingId],references: [id] ,onDelete: Cascade)
}

model Feedback{
id String @id @default(auto()) @map("_id") @db.ObjectId
userId String @db.ObjectId
body String 
likingIds String[] @db.ObjectId
rating Int @default(0)
createdAt DateTime @default(now())
listingId String @db.ObjectId
cleanliness Int 
accuracy Int 
checkIn Int
communication Int
location Int 
value Int
listing Listing @relation(fields: [listingId],references: [id],onDelete:Cascade)
user User @relation(fields:[userId], references:[id],onDelete:Cascade)
comments Comment[]
}

model Comment{
id String @id @default(auto()) @map("_id") @db.ObjectId
authorId String @db.ObjectId
feedbackId String  @db.ObjectId
message String
listingId String @db.ObjectId
createdAt DateTime @default(now())
likingIds String[] @db.ObjectId

listing Listing @relation(fields: [listingId],references: [id],onDelete:Cascade)
feedback Feedback @relation(fields: [feedbackId],references: [id],onDelete:Cascade)
author User @relation(fields: [authorId], references: [id],onDelete:Cascade)
}
